{"ast":null,"code":"// import React, { useState } from \"react\";\n// import Dice from \"./components/Dice\";\n// import Player from \"./components/Player\";\n// import GameOptions from \"./old/GameOptions\";\n\n// const App = () => {\n//   const [player1, setPlayer1] = useState({\n//     name: \"Player 1\",\n//     score: 0,\n//     currentScore: 0,\n//     isActive: true,\n//   });\n//   const [player2, setPlayer2] = useState({\n//     name: \"Player 2\",\n//     score: 0,\n//     currentScore: 0,\n//     isActive: false,\n//   });\n//   const [currentPlayer, setCurrentPlayer] = useState(1);\n\n//   const [dice1, setDice1] = useState(0); // initial dice value\n//   const [dice2, setDice2] = useState(0);\n\n//   const [isGameOver, setIsGameOver] = useState(false); // game over state\n//   const [winningScore, setWinningScore] = useState(100); // winning score\n\n//   //const activePlayer = currentPlayer === 1 ? player1 : player2;\n//   //const setActivePlayer = currentPlayer === 1 ? setPlayer1 : setPlayer2;\n\n//   const checkWinningCondition = (player, score) => {\n//     if (score >= winningScore) {\n//       setIsGameOver(true);\n//       alert(`${player.playerNumber} wins the game!`);\n//       return true;\n//     }\n//     return false;\n//   };\n\n//   const rollDice = () => {\n//     if (isGameOver) return;\n\n//     const newDice1 = Math.floor(Math.random() * 6) + 1;\n//     const newDice2 = Math.floor(Math.random() * 6) + 1;\n//     setDice1(newDice1);\n//     setDice2(newDice2);\n\n//     if (newDice1 === 6 && newDice2 === 6) {\n//       if (currentPlayer === 1) {\n//         setPlayer1((prev) => ({ ...prev, currentScore: 0, isActive: false }));\n//         setPlayer2((prev) => ({ ...prev, isActive: true }));\n//       } else {\n//         setPlayer2((prev) => ({ ...prev, currentScore: 0, isActive: false }));\n//         setPlayer1((prev) => ({ ...prev, isActive: true }));\n//       }\n//       setCurrentPlayer(currentPlayer === 1 ? 2 : 1);\n//     } else {\n//       const newScore = newDice1 + newDice2;\n//       if (currentPlayer === 1) {\n//         const updatedScore = player1.currentScore + newScore;\n//         if (checkWinningCondition(player1, player1.score + updatedScore)) {\n//           setPlayer1((prev) => ({\n//             ...prev,\n//             score: prev.score + updatedScore,\n//             currentScore: updatedScore,\n//             isActive: false,\n//           }));\n//         } else {\n//           setPlayer1((prev) => ({ ...prev, currentScore: updatedScore }));\n//         }\n//       } else {\n//         const updatedScore = player2.currentScore + newScore;\n//         if (checkWinningCondition(player2, player2.score + updatedScore)) {\n//           setPlayer2((prev) => ({\n//             ...prev,\n//             score: prev.score + updatedScore,\n//             currentScore: updatedScore,\n//             isActive: false,\n//           }));\n//         } else {\n//           setPlayer2((prev) => ({ ...prev, currentScore: updatedScore }));\n//         }\n//       }\n//     }\n//   };\n\n//   const holdScore = () => {\n//     if (isGameOver) return;\n\n//     if (currentPlayer === 1) {\n//       const nextScore = player1.score + player1.currentScore;\n//       if (checkWinningCondition(player1, nextScore)) {\n//         setPlayer1((prev) => ({ ...prev, score: nextScore, isActive: false }));\n//       } else {\n//         setPlayer1((prev) => ({\n//           ...prev,\n//           score: nextScore,\n//           currentScore: 0,\n//           isActive: false,\n//         }));\n//         setPlayer2((prev) => ({ ...prev, isActive: true }));\n//         setCurrentPlayer(2);\n//       }\n//     } else {\n//       const nextScore = player2.score + player2.currentScore;\n//       if (checkWinningCondition(player2, nextScore)) {\n//         setPlayer2((prev) => ({ ...prev, score: nextScore, isActive: false }));\n//       } else {\n//         setPlayer2((prev) => ({\n//           ...prev,\n//           score: nextScore,\n//           currentScore: 0,\n//           isActive: false,\n//         }));\n//         setPlayer1((prev) => ({ ...prev, isActive: true }));\n//         setCurrentPlayer(1);\n//       }\n//     }\n//   };\n\n//   const resetGame = () => {\n//     setPlayer1({ name: \"Player 1\", score: 0, currentScore: 0, isActive: true });\n//     setPlayer2({\n//       name: \"Player 2\",\n//       score: 0,\n//       currentScore: 0,\n//       isActive: false,\n//     });\n//     setCurrentPlayer(1);\n//     setDice1(0);\n//     setDice2(0);\n//     setIsGameOver(false);\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <h1>Dice Game</h1>\n//       <div className=\"players\">\n//         <Player\n//           playerNumber={1}\n//           name={player1.name}\n//           score={player1.score}\n//           currentScore={player1.currentScore}\n//           isActive={player1.isActive}\n//         />\n//         <Player\n//           playerNumber={2}\n//           name={player2.name}\n//           score={player2.score}\n//           currentScore={player2.currentScore}\n//           isActive={player2.isActive}\n//         />\n//       </div>\n\n//       <Dice value={dice1} />\n//       <Dice value={dice2} />\n\n//       <GameOptions\n//         onRoll={rollDice}\n//         onHold={holdScore}\n//         isGameOver={isGameOver}\n//       />\n\n//       <button onClick={resetGame}>Reset Game</button>\n\n//       <div className=\"input-score\">\n//         <label>Set Winning Score:</label>\n//         <input\n//           type=\"number\"\n//           value={winningScore}\n//           onChange={(e) => setWinningScore(parseInt(e.target.value))}\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/benishakov/dice-game/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import Dice from \"./components/Dice\";\n// import Player from \"./components/Player\";\n// import GameOptions from \"./old/GameOptions\";\n\n// const App = () => {\n//   const [player1, setPlayer1] = useState({\n//     name: \"Player 1\",\n//     score: 0,\n//     currentScore: 0,\n//     isActive: true,\n//   });\n//   const [player2, setPlayer2] = useState({\n//     name: \"Player 2\",\n//     score: 0,\n//     currentScore: 0,\n//     isActive: false,\n//   });\n//   const [currentPlayer, setCurrentPlayer] = useState(1);\n\n//   const [dice1, setDice1] = useState(0); // initial dice value\n//   const [dice2, setDice2] = useState(0);\n\n//   const [isGameOver, setIsGameOver] = useState(false); // game over state\n//   const [winningScore, setWinningScore] = useState(100); // winning score\n\n//   //const activePlayer = currentPlayer === 1 ? player1 : player2;\n//   //const setActivePlayer = currentPlayer === 1 ? setPlayer1 : setPlayer2;\n\n//   const checkWinningCondition = (player, score) => {\n//     if (score >= winningScore) {\n//       setIsGameOver(true);\n//       alert(`${player.playerNumber} wins the game!`);\n//       return true;\n//     }\n//     return false;\n//   };\n\n//   const rollDice = () => {\n//     if (isGameOver) return;\n\n//     const newDice1 = Math.floor(Math.random() * 6) + 1;\n//     const newDice2 = Math.floor(Math.random() * 6) + 1;\n//     setDice1(newDice1);\n//     setDice2(newDice2);\n\n//     if (newDice1 === 6 && newDice2 === 6) {\n//       if (currentPlayer === 1) {\n//         setPlayer1((prev) => ({ ...prev, currentScore: 0, isActive: false }));\n//         setPlayer2((prev) => ({ ...prev, isActive: true }));\n//       } else {\n//         setPlayer2((prev) => ({ ...prev, currentScore: 0, isActive: false }));\n//         setPlayer1((prev) => ({ ...prev, isActive: true }));\n//       }\n//       setCurrentPlayer(currentPlayer === 1 ? 2 : 1);\n//     } else {\n//       const newScore = newDice1 + newDice2;\n//       if (currentPlayer === 1) {\n//         const updatedScore = player1.currentScore + newScore;\n//         if (checkWinningCondition(player1, player1.score + updatedScore)) {\n//           setPlayer1((prev) => ({\n//             ...prev,\n//             score: prev.score + updatedScore,\n//             currentScore: updatedScore,\n//             isActive: false,\n//           }));\n//         } else {\n//           setPlayer1((prev) => ({ ...prev, currentScore: updatedScore }));\n//         }\n//       } else {\n//         const updatedScore = player2.currentScore + newScore;\n//         if (checkWinningCondition(player2, player2.score + updatedScore)) {\n//           setPlayer2((prev) => ({\n//             ...prev,\n//             score: prev.score + updatedScore,\n//             currentScore: updatedScore,\n//             isActive: false,\n//           }));\n//         } else {\n//           setPlayer2((prev) => ({ ...prev, currentScore: updatedScore }));\n//         }\n//       }\n//     }\n//   };\n\n//   const holdScore = () => {\n//     if (isGameOver) return;\n\n//     if (currentPlayer === 1) {\n//       const nextScore = player1.score + player1.currentScore;\n//       if (checkWinningCondition(player1, nextScore)) {\n//         setPlayer1((prev) => ({ ...prev, score: nextScore, isActive: false }));\n//       } else {\n//         setPlayer1((prev) => ({\n//           ...prev,\n//           score: nextScore,\n//           currentScore: 0,\n//           isActive: false,\n//         }));\n//         setPlayer2((prev) => ({ ...prev, isActive: true }));\n//         setCurrentPlayer(2);\n//       }\n//     } else {\n//       const nextScore = player2.score + player2.currentScore;\n//       if (checkWinningCondition(player2, nextScore)) {\n//         setPlayer2((prev) => ({ ...prev, score: nextScore, isActive: false }));\n//       } else {\n//         setPlayer2((prev) => ({\n//           ...prev,\n//           score: nextScore,\n//           currentScore: 0,\n//           isActive: false,\n//         }));\n//         setPlayer1((prev) => ({ ...prev, isActive: true }));\n//         setCurrentPlayer(1);\n//       }\n//     }\n//   };\n\n//   const resetGame = () => {\n//     setPlayer1({ name: \"Player 1\", score: 0, currentScore: 0, isActive: true });\n//     setPlayer2({\n//       name: \"Player 2\",\n//       score: 0,\n//       currentScore: 0,\n//       isActive: false,\n//     });\n//     setCurrentPlayer(1);\n//     setDice1(0);\n//     setDice2(0);\n//     setIsGameOver(false);\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <h1>Dice Game</h1>\n//       <div className=\"players\">\n//         <Player\n//           playerNumber={1}\n//           name={player1.name}\n//           score={player1.score}\n//           currentScore={player1.currentScore}\n//           isActive={player1.isActive}\n//         />\n//         <Player\n//           playerNumber={2}\n//           name={player2.name}\n//           score={player2.score}\n//           currentScore={player2.currentScore}\n//           isActive={player2.isActive}\n//         />\n//       </div>\n\n//       <Dice value={dice1} />\n//       <Dice value={dice2} />\n\n//       <GameOptions\n//         onRoll={rollDice}\n//         onHold={holdScore}\n//         isGameOver={isGameOver}\n//       />\n\n//       <button onClick={resetGame}>Reset Game</button>\n\n//       <div className=\"input-score\">\n//         <label>Set Winning Score:</label>\n//         <input\n//           type=\"number\"\n//           value={winningScore}\n//           onChange={(e) => setWinningScore(parseInt(e.target.value))}\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}