{"ast":null,"code":"var _jsxFileName = \"/Users/benishakov/dice-game/src/Logic/Game.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useReducer, useEffect, useState, useCallback } from 'react';\n// import { gameReducer } from './GameReducer';\n// import Dice from '../components/Dice';\n// import GameControls from '../components/GameControls';\n// import PlayerScore from '../components/PlayerScore';\n// import ScoreBoard from '../components/ScoreBoard';\n// import '../App.css';\n\n// const initialState = {\n//     status: \"PLAYING\",\n//     roundScore: 0,\n//     winningScore: 100,\n//     turn: \"HUMAN\",\n//     playerScore: { HUMAN: 0, AI: 0 },\n//     winCount: { HUMAN:0, AI: 0},\n//     lastRoll: [0, 0],\n//     doubleSix: false\n// };\n\n// export default function Game() {\n//     const [gameState, dispatch] = useReducer(gameReducer, initialState);\n//     const [winningScoreInput, setWinningScoreInput] = useState(100);\n//     const [audioContext, setAudioContext] = useState(null);\n//     const [isRolling, setIsRolling] = useState(false);\n\n//     useEffect(() => {\n//         const context = new (window.AudioContext || window.webkitAudioContext)();\n//         setAudioContext(context);\n\n//         // Load game state from local storage on component mount\n//         const savedGameState = localStorage.getItem('gameState');\n//         if(savedGameState) {\n//             const parsedData = JSON.parse(savedGameState);\n//             dispatch({ \n//                 type: 'newGame', \n//                 payload: parsedData\n//              });\n//         }\n\n//         return () => {\n//             if(context) {\n//                 context.close();\n//             }\n//         };\n//     }, []);\n\n//     useEffect(() => {\n//         // Save game state to local storage whenever it changes\n//         localStorage.setItem('gameState', JSON.stringify(gameState));\n//     }, [gameState]);\n\n//     useEffect(() => {\n//         if(gameState.turn === \"AI\" && gameState.status === \"PLAYING\") {\n//             setTimeout(playAITurn, 1000);\n//         }\n//     }, [gameState.turn, gameState.status]);\n\n//     const rollDice = useCallback(() => {\n//         if(isRolling) return;\n\n//         const dice1 = Math.floor(Math.random() * 6) + 1;\n//         const dice2 = Math.floor(Math.random() * 6) + 1;\n//         setIsRolling(true);\n//         setTimeout(() => {\n//             dispatch({ type: 'roll', dices: [dice1, dice2] });\n//             playSound(audioContext, 'roll');\n//             setIsRolling(false);\n//         if(dice1 === 6 && dice2 === 6) {\n//             setTimeout(() => {\n//                 alert('Double Six! You lose your round score!');\n//             }, 100);\n//         }\n//         }, 1000);\n//     }, [audioContext, isRolling]);\n\n//     const hold = () => {\n//         dispatch({ type: 'hold' });\n//         playSound(audioContext, 'hold');\n//     };\n\n//     const startNewGame = () => {\n//         dispatch({ type: 'newGame', winningScore: winningScoreInput });\n//         playSound(audioContext, 'newGame');\n//     };\n\n//     const resetGame = () => {\n//         dispatch({ type: 'reset', winningScore: winningScoreInput });\n//         playSound(audioContext, 'reset');\n//     };\n\n//     const playAITurn = useCallback(() => {\n//         rollDice();\n//         setTimeout(() => {\n//             if(gameState.roundScore >= 20 || Math.random() < 0.3) {\n//                 hold();\n//             }\n//         }, 1000);\n//     }, [gameState.roundScore, gameState.status]);\n\n//     const playSound = (context, type) => {\n//         if(!context) return;\n//         const oscillator = context.createOscillator();\n//         const gainNode = context.createGain();\n\n//         oscillator.connect(gainNode);\n//         gainNode.connect(context.destination);\n\n//         switch(type) {\n//             case 'roll':\n//                 oscillator.type = 'triangle';\n//                 oscillator.frequency.setValueAtTime(440, context.currentTime);\n//                 break;\n//             case 'hold':\n//                 oscillator.type = 'sine';\n//                 oscillator.frequency.setValueAtTime(660, context.currentTime);\n//                 break;\n//             case 'newGame':\n//             case 'reset':\n//                 oscillator.type = 'square';\n//                 oscillator.frequency.setValueAtTime(523.25, context.currentTime);\n//                 break;\n//             default:\n//                 return;\n//         }\n\n//         gainNode.gain.setValueAtTime(1, context.currentTime);\n//         gainNode.gain.exponentialRampToValueAtTime(0.001, context.currentTime + 1);\n//         oscillator.start(context.currentTime);\n//         oscillator.stop(context.currentTime + 1);\n//     };\n\n//     return (\n//         <div className=\"game-container\">\n//             <h1>Dice Game</h1>\n//             <ScoreBoard\n//                 playerScore={gameState.playerScore}\n//                 winCount={gameState.winCount}\n//                 currentTurn={gameState.turn}\n//             />\n//             <div className=\"game-info\">\n//                 <p>Current Round Score: {gameState.roundScore}</p>\n//                 <p>Current Turn: {gameState.turn}</p>\n//                 <p>Game Status: {gameState.status}</p>\n//             </div>\n//             <Dice dice1={gameState.lastRoll[0]} dice2={gameState.lastRoll[1]} isRolling={isRolling} />\n//             {gameState.doubleSix && (\n//                 <div className=\"double-six-message\">\n//                     <p>Double Six! You lose your turn!</p>\n//                 </div>\n//             )}\n//             <GameControls\n//                 onRoll={rollDice}\n//                 onHold={hold}\n//                 disabled={gameState.status !== \"PLAYING\" || gameState.turn !== \"HUMAN\" || isRolling}\n//             />\n//             <div className=\"new-game\">\n//                 <input\n//                     type=\"number\"\n//                     value={winningScoreInput}\n//                     onChange={(e) => setWinningScoreInput(parseInt(e.target.value, 10))}\n//                     min=\"1\"\n//                 />\n//                 <button onClick={startNewGame}>New Game</button>\n//                 <button onClick={resetGame}>Reset Game</button>\n//             </div>\n//             <PlayerScore\n//                 player=\"HUMAN\"\n//                 score={gameState.playerScore.HUMAN}\n//                 isCurrentTurn={gameState.turn === \"HUMAN\"}\n//             />\n//             <PlayerScore\n//                 player=\"AI\"\n//                 score={gameState.playerScore.AI}\n//                 isCurrentTurn={gameState.turn === \"AI\"}\n//             />\n//         </div>\n//     );\n// }\n\nconst Game = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Game Component Rendered\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 7\n  }, this);\n};\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["Game","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/benishakov/dice-game/src/Logic/Game.jsx"],"sourcesContent":["// import React, { useReducer, useEffect, useState, useCallback } from 'react';\n// import { gameReducer } from './GameReducer';\n// import Dice from '../components/Dice';\n// import GameControls from '../components/GameControls';\n// import PlayerScore from '../components/PlayerScore';\n// import ScoreBoard from '../components/ScoreBoard';\n// import '../App.css';\n\n// const initialState = {\n//     status: \"PLAYING\",\n//     roundScore: 0,\n//     winningScore: 100,\n//     turn: \"HUMAN\",\n//     playerScore: { HUMAN: 0, AI: 0 },\n//     winCount: { HUMAN:0, AI: 0},\n//     lastRoll: [0, 0],\n//     doubleSix: false\n// };\n\n// export default function Game() {\n//     const [gameState, dispatch] = useReducer(gameReducer, initialState);\n//     const [winningScoreInput, setWinningScoreInput] = useState(100);\n//     const [audioContext, setAudioContext] = useState(null);\n//     const [isRolling, setIsRolling] = useState(false);\n\n//     useEffect(() => {\n//         const context = new (window.AudioContext || window.webkitAudioContext)();\n//         setAudioContext(context);\n\n//         // Load game state from local storage on component mount\n//         const savedGameState = localStorage.getItem('gameState');\n//         if(savedGameState) {\n//             const parsedData = JSON.parse(savedGameState);\n//             dispatch({ \n//                 type: 'newGame', \n//                 payload: parsedData\n//              });\n//         }\n\n//         return () => {\n//             if(context) {\n//                 context.close();\n//             }\n//         };\n//     }, []);\n\n//     useEffect(() => {\n//         // Save game state to local storage whenever it changes\n//         localStorage.setItem('gameState', JSON.stringify(gameState));\n//     }, [gameState]);\n\n//     useEffect(() => {\n//         if(gameState.turn === \"AI\" && gameState.status === \"PLAYING\") {\n//             setTimeout(playAITurn, 1000);\n//         }\n//     }, [gameState.turn, gameState.status]);\n\n//     const rollDice = useCallback(() => {\n//         if(isRolling) return;\n\n//         const dice1 = Math.floor(Math.random() * 6) + 1;\n//         const dice2 = Math.floor(Math.random() * 6) + 1;\n//         setIsRolling(true);\n//         setTimeout(() => {\n//             dispatch({ type: 'roll', dices: [dice1, dice2] });\n//             playSound(audioContext, 'roll');\n//             setIsRolling(false);\n//         if(dice1 === 6 && dice2 === 6) {\n//             setTimeout(() => {\n//                 alert('Double Six! You lose your round score!');\n//             }, 100);\n//         }\n//         }, 1000);\n//     }, [audioContext, isRolling]);\n\n//     const hold = () => {\n//         dispatch({ type: 'hold' });\n//         playSound(audioContext, 'hold');\n//     };\n\n//     const startNewGame = () => {\n//         dispatch({ type: 'newGame', winningScore: winningScoreInput });\n//         playSound(audioContext, 'newGame');\n//     };\n\n//     const resetGame = () => {\n//         dispatch({ type: 'reset', winningScore: winningScoreInput });\n//         playSound(audioContext, 'reset');\n//     };\n\n//     const playAITurn = useCallback(() => {\n//         rollDice();\n//         setTimeout(() => {\n//             if(gameState.roundScore >= 20 || Math.random() < 0.3) {\n//                 hold();\n//             }\n//         }, 1000);\n//     }, [gameState.roundScore, gameState.status]);\n\n//     const playSound = (context, type) => {\n//         if(!context) return;\n//         const oscillator = context.createOscillator();\n//         const gainNode = context.createGain();\n    \n//         oscillator.connect(gainNode);\n//         gainNode.connect(context.destination);\n    \n//         switch(type) {\n//             case 'roll':\n//                 oscillator.type = 'triangle';\n//                 oscillator.frequency.setValueAtTime(440, context.currentTime);\n//                 break;\n//             case 'hold':\n//                 oscillator.type = 'sine';\n//                 oscillator.frequency.setValueAtTime(660, context.currentTime);\n//                 break;\n//             case 'newGame':\n//             case 'reset':\n//                 oscillator.type = 'square';\n//                 oscillator.frequency.setValueAtTime(523.25, context.currentTime);\n//                 break;\n//             default:\n//                 return;\n//         }\n    \n//         gainNode.gain.setValueAtTime(1, context.currentTime);\n//         gainNode.gain.exponentialRampToValueAtTime(0.001, context.currentTime + 1);\n//         oscillator.start(context.currentTime);\n//         oscillator.stop(context.currentTime + 1);\n//     };\n    \n\n//     return (\n//         <div className=\"game-container\">\n//             <h1>Dice Game</h1>\n//             <ScoreBoard\n//                 playerScore={gameState.playerScore}\n//                 winCount={gameState.winCount}\n//                 currentTurn={gameState.turn}\n//             />\n//             <div className=\"game-info\">\n//                 <p>Current Round Score: {gameState.roundScore}</p>\n//                 <p>Current Turn: {gameState.turn}</p>\n//                 <p>Game Status: {gameState.status}</p>\n//             </div>\n//             <Dice dice1={gameState.lastRoll[0]} dice2={gameState.lastRoll[1]} isRolling={isRolling} />\n//             {gameState.doubleSix && (\n//                 <div className=\"double-six-message\">\n//                     <p>Double Six! You lose your turn!</p>\n//                 </div>\n//             )}\n//             <GameControls\n//                 onRoll={rollDice}\n//                 onHold={hold}\n//                 disabled={gameState.status !== \"PLAYING\" || gameState.turn !== \"HUMAN\" || isRolling}\n//             />\n//             <div className=\"new-game\">\n//                 <input\n//                     type=\"number\"\n//                     value={winningScoreInput}\n//                     onChange={(e) => setWinningScoreInput(parseInt(e.target.value, 10))}\n//                     min=\"1\"\n//                 />\n//                 <button onClick={startNewGame}>New Game</button>\n//                 <button onClick={resetGame}>Reset Game</button>\n//             </div>\n//             <PlayerScore\n//                 player=\"HUMAN\"\n//                 score={gameState.playerScore.HUMAN}\n//                 isCurrentTurn={gameState.turn === \"HUMAN\"}\n//             />\n//             <PlayerScore\n//                 player=\"AI\"\n//                 score={gameState.playerScore.AI}\n//                 isCurrentTurn={gameState.turn === \"AI\"}\n//             />\n//         </div>\n//     );\n// }\n\nconst Game = () => {\n    return (\n      <div>\n        <h2>Game Component Rendered</h2>\n      </div>\n    );\n};\n\nexport default Game;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGA,CAAA,KAAM;EACf,oBACEC,OAAA;IAAAC,QAAA,eACED,OAAA;MAAAC,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEZ,CAAC;AAACC,EAAA,GANIP,IAAI;AAQV,eAAeA,IAAI;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}